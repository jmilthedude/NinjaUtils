plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT' apply(false)
    id 'java'
}

version = project.mod_version
group = project.maven_group


repositories {
}

dependencies {
}

subprojects {

    apply plugin: "fabric-loom"
    repositories {
    }
    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    processResources {
        inputs.property "version", project.version
        inputs.property "minecraft_version", project.minecraft_version
        inputs.property "loader_version", project.loader_version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version,
                    "minecraft_version": project.minecraft_version,
                    "loader_version": project.loader_version
        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release.set(targetJavaVersion)
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }
}

tasks.register('copyLibs', Copy).configure {
    subprojects.forEach { p ->
        from p.layout.buildDirectory.file("libs")
        into "$rootDir/build/libs"
        include 'NinjaUtils*.jar'
    }

}

build.finalizedBy('copyLibs')